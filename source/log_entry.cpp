//
// log_entry.cpp
// ~~~~~~~~~~~~~
//
// Author: Joseph Adomatis
// Copyright (c) 2020 Joseph R Adomatis (joseph dot adomatis at gmail dot com)
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <chrono>
#include <ctime>

#include "../headers/nlohmann/json.hpp"
#include "../headers/josephus_namespace.hpp"
#include "../headers/log_entry.hpp"

using namespace std::chrono;
using json = nlohmann::json;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// global variable definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// global function definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// josephus::LogEntry member definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////////////////////////

josephus::LogEntry::LogEntry()
{
    this->timestamp = std::chrono::system_clock::now();
    auto nowDays = floor<std::chrono::days>(this->timestamp);
    this->entryDay = nowDays.time_since_epoch().count();
}

///////////////////////////////////////////////////////////////////////////////
// josephus::LogEntry::getDay
///////////////////////////////////////////////////////////////////////////////

size_t josephus::LogEntry::getDay()
{
    return(this->entryDay);
}

///////////////////////////////////////////////////////////////////////////////
// josephus::LogEntry::getISOTimestamp
///////////////////////////////////////////////////////////////////////////////

std::string josephus::LogEntry::getISOTimestamp()
{
    auto nowTime = system_clock::to_time_t(this->timestamp);
    auto nowMS = duration_cast<milliseconds>(this->timestamp.time_since_epoch()).count() % 1000;
    std::string strMS{"000" + std::to_string(nowMS)};
    strMS = strMS.substr(strMS.size() - 3);
    auto nowBT = *gmtime(&nowTime);
    char buf[sizeof "0000-00-00T00:00:00"];
    strftime(buf, sizeof buf, "%FT%T",&nowBT);
    std::string newStamp{buf};
    newStamp.append("." + strMS + "Z");
    return(std::move(newStamp));
}

///////////////////////////////////////////////////////////////////////////////
// josephus::LogEntry::getTracePath
///////////////////////////////////////////////////////////////////////////////

std::string josephus::LogEntry::getTracePath()
{
    std::string tPath{this->traceNamespace};
    tPath.append("::");
    tPath.append(this->traceClass);
    tPath.append("::");
    tPath.append(this->traceMethod);
    return(std::move(tPath));
}

///////////////////////////////////////////////////////////////////////////////
// josephus::LogEntry::setCategory
///////////////////////////////////////////////////////////////////////////////

void josephus::LogEntry::setCategory(const std::string& lCat)
{
    this->category = lCat;
    return;   
}

///////////////////////////////////////////////////////////////////////////////
// josephus::LogEntry::setClass
///////////////////////////////////////////////////////////////////////////////

void josephus::LogEntry::setClass(const std::string& lClass)
{
    this->traceClass = lClass;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// josephus::LogEntry::setLevel
///////////////////////////////////////////////////////////////////////////////

void josephus::LogEntry::setLevel(josephus::enums::level lLevel)
{
    switch(lLevel){
        case josephus::enums::level::DEBUG:
            this->level = "DEBUG";
            break;
        case josephus::enums::level::ERROR:
            this->level = "ERROR";
            break;
        case josephus::enums::level::FATAL:
            this->level = "FATAL";
            break;
        case josephus::enums::level::INFO:
            this->level = "INFO";
            break;
        case josephus::enums::level::TRACE:
            this->level = "TRACE";
            break;
        case josephus::enums::level::WARN:
            this->level = "WARNING";
            break;
        default:
            break;
    }
    return;
}

///////////////////////////////////////////////////////////////////////////////
// josephus::LogEntry::setMessage
///////////////////////////////////////////////////////////////////////////////

void josephus::LogEntry::setMessage(const std::string& lMsg)
{
    this->message = lMsg;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// josephus::LogEntry::setMethod
///////////////////////////////////////////////////////////////////////////////

void josephus::LogEntry::setMethod(const std::string& lMethod)
{
    this->traceMethod = lMethod;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// josephus::LogEntry::setNamespace
///////////////////////////////////////////////////////////////////////////////

void josephus::LogEntry::setNamespace(const std::string& lNamespace)
{
    this->traceNamespace = lNamespace;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// josephus::LogEntry::setThread
///////////////////////////////////////////////////////////////////////////////

void josephus::LogEntry::setThread(const std::string& lThread)
{
    this->thread = lThread;
    return;
}

///////////////////////////////////////////////////////////////////////////////
// josephus::LogEntry::toString
///////////////////////////////////////////////////////////////////////////////

std::string josephus::LogEntry::toString()
{
    json jsonObject;
    jsonObject["timestamp"] = this->getISOTimestamp();
    jsonObject["thread_id"] = this->thread;
    jsonObject["trace"] = this->getTracePath();
    jsonObject["level"] = this->level;
    jsonObject["category"] = this->category;
    jsonObject["message"] = this->message;
    std::string returnString{jsonObject.dump()};
    return(std::move(returnString));
}

///////////////////////////////////////////////////////////////////////////////
// Deconstructor
///////////////////////////////////////////////////////////////////////////////

josephus::LogEntry::~LogEntry()
{

}
